Exercise: Test-Driven Development (Data Analysis)
-------------------------------------------------------------------------------

Create a file named "DataAnalysis.py" and implement the following artifacts:

1. Custom Exceptions
--------------------
Implement the following exceptions:
    DataAccessError
    ServiceError

2. DataAccessObject
-------------------
Implement a class named "DataAccessObject" which provides the following operations:

    __init__(self, filename)
    Takes a filename ans stores this value in an attribute

    readData(self)
    Reads the file (using filename) and stores the measurement data (float values)
    into a list and returns that list.
    The "FileNotFoundError" exception should be wrapped into a "DataAccessError"
    exception.

3. DataAnalysisService
----------------------
Implement a class named "DataAnalysisService" which implements:

    __init__(self, dao)
    Takes an "DataAccessObject" to access the data values stored in the filesystem.

    meanValue(self)
    Reads the measurement data (via the DataAccessObject) and calculates the mean
    value of the returned list.
    The "DataAccessError" exception should be wrapped into a "ServiceError" exception.

    maxValue(self)
    Reads the measurement data (via the DataAccessObject) and calculates the maximum
    value of the returned list.
    The "DataAccessError" exception should be wrapped into a "ServiceError" exception.

4. Test Cases
-------------
Implement all test cases needed to tests these artifacts with a code coverage of 100%.
Use a file called "DataAnalysisTest.py".

Tip: Review the examples shown in "Analysis.py" to solve the exercise.


How to run the test cases?
--------------------------
$ pwd
teiniker-lectures-softwaretesting

Tip: Make sure that the path to the data file is 'tdd/analysis/data.csv'

$ python3 -m unittest tdd/analysis_exercise/DataAnalysisTest.py


How to run the code coverage analysis?
--------------------------------------
$ pwd
teiniker-lectures-softwaretesting

$ coverage3 run -m unittest tdd/analysis_exercise/DataAnalysisTest.py

$ coverage3 report -m

$ coverage3 html
=> Browser: file:///home/student/github/teiniker-lectures-softwaretesting/htmlcov/index.html


References:
-----------
> Errors and Exceptions
	https://docs.python.org/3/tutorial/errors.html

> Python Custom Exceptions
	https://www.programiz.com/python-programming/user-defined-exception

> Python Exception Handling - Try, Except and Finally
	https://www.programiz.com/python-programming/exception-handling

> csv â€” CSV File Reading and Writing
	https://docs.python.org/3/library/csv.html